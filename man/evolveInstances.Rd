% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/evolveInstances.R
\name{evolveInstances}
\alias{evolveInstances}
\title{TSP generating EA.}
\usage{
evolveInstances(fitness.fun, n.population = 30L, n.offspring, n.elite = 1L,
  survival.strategy = "plus", logger = ecr::setupOptPathLoggingMonitor(),
  cells.round = 100L, rnd = FALSE, n.points, normal.mutation.rate = 0.1,
  normal.mutation.sigma = 0.025, uniform.mutation.rate = 0.05,
  rnd.before.mutation = FALSE,
  parent.selector = ecr::setupTournamentSelector(k = 2L),
  survival.selector = ecr::setupGreedySelector(),
  recombinator = setupGeneratingEARecombinator(frac = 0.5),
  stopping.conditions = NULL, monitor = ecr::setupConsoleMonitor(),
  mutator = NULL, generator = setupGeneratingEAUniformGenerator())
}
\arguments{
\item{fitness.fun}{[\code{function(x)}]\cr
Fitness function used to judge the fitness of a TSP instance.
\code{x} is a numeric matrix with 2 columns, containing
the coordinates of a TSP instance.}

\item{n.population}{[\code{integer(1)}]\cr
Number of TSP instances maintained in each population.
Default is 30.}

\item{n.offspring}{[\code{integer(1)}]\cr
Number of TSP instances generated in each evolutionary cycle.
Default is \code{n.population}.}

\item{n.elite}{[\code{integer(1)}]\cr
Number of fittest individuals of the current generation that shall be copied to the
next generation without changing. Keep in mind, that the algorithm
does not care about this option if the \code{survival.strategy} is set to 'plus'.
Default is 0.}

\item{survival.strategy}{[\code{character(1)}]\cr
Determines the survival strategy used by the EA. Possible are \dQuote{plus} for
a classical (mu + lambda) strategy and \dQuote{comma} for (mu, lambda).
Default is \dQuote{plus}.}

\item{logger}{[\code{function}]\cr
Monitoring object used to log stuff.
Default is \code{NULL} which means no logging at all.
See \code{\link{setupOptPathLoggingMonitor}} for ecr's build-in logger.}

\item{cells.round}{[\code{numeric(1)}]\cr
Grid resolution for rounding.
Default is 100.}

\item{rnd}{[\code{logical(1)}]\cr
Round coordinates to grid centers?
Default is \code{FALSE}.}

\item{n.points}{[\code{integer(1)}]\cr
Number of cities of each TSP instance.
Default is 50.}

\item{normal.mutation.rate}{[\code{numeric(1)}]\cr
Mutation probability in normal mutation (in [0,1]).
Only relevant if \code{mutator = NULL}, i.e., no custom mutator is set.}

\item{normal.mutation.sigma}{[\code{numeric(1)}]\cr
Standard deviation of normal noise in normal mutation.
Only relevant if \code{mutator = NULL}, i.e., no custom mutator is set.}

\item{uniform.mutation.rate}{[\code{numeric(1)}]\cr
Mutation probability in uniform mutation (in [0,1]).
Only relevant if \code{mutator = NULL}, i.e., no custom mutator is set.}

\item{rnd.before.mutation}{[\code{logical(1)}]\cr
Round the coordinates before normal mutation.
Default is \code{FALSE}.}

\item{parent.selector}{[\code{ecr_selector}]\cr
Selection operator which implements a procedure to copy individuals from a
given population to the mating pool, i. e., allow them to become parents.}

\item{survival.selector}{[\code{ecr_selector}]\cr
Selection operator which implements a procedurce to extract individuals from
a given set, which should survive and set up the next generation.}

\item{recombinator}{[\code{ecr_recombinator}]\cr
Recombination operator of type \code{ecr_recombinator}.}

\item{stopping.conditions}{[\code{list}]\cr
List of functions of type \code{ecr_terminator}. At least one stopping
condition needs to be passed.
Default is the empty list.}

\item{monitor}{[\code{function}]\cr
Monitoring function.
Default is \code{NULL}, i.e. no monitoring.}

\item{mutator}{[\code{ecr_mutator}]\cr
Mutation operator of type \code{ecr_mutator}.}

\item{generator}{[\code{ecr_generator}]\cr
Generator operator of type \code{ecr_generator} for the generation of the initial
population.}

\item{...}{[any]\cr
Not used.}
}
\value{
[\code{\link[ecr]{ecr_result}}]
}
\description{
Function to create instances for the Travelling Salesperson Problem or a
related orienteering problem by means of a sophisticated evololutionary
algorithm.
}
