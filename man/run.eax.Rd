% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solver.eax.R
\name{run.eax}
\alias{run.eax}
\title{Solver: EAX}
\usage{
\method{run}{eax}(solver, instance, max.trials = 1L, pop.size = 100L,
  off.size = 30L, cutoff.time = 10L, opt.tour.length = NULL,
  seed = as.integer(runif(1L) * 2^15), with.restarts = FALSE,
  with.GPX = FALSE, snapshot.step = 0L, full.matrix = FALSE,
  verbose = FALSE, log.trajectory = TRUE, return.trajectory.file = FALSE,
  init.pop = NULL, ...)
}
\arguments{
\item{solver}{[\code{TSPSolver}]\cr
TSPSolver object.}

\item{instance}{[\code{character(1)} | \code{Network}]\cr
Path to TSP instance in \href{https://www.iwr.uni-heidelberg.de/groups/comopt/software/TSPLIB95/}{TSPlib}
format or \code{Network} object.}

\item{max.trials}{[\code{integer(1)}]\cr
Number of independent runs. At the moment this is fixed to 1.}

\item{pop.size}{[\code{integer(1)}]\cr
Population size.
Default is 100.}

\item{off.size}{[\code{integer(1)}]\cr
Number of offspring generated in each generation.
Default is 30.}

\item{cutoff.time}{[\code{integer(1)}]\cr
Maximal running time in seconds.
Default is 10.}

\item{opt.tour.length}{[\code{integer(1) | NULL}]\cr
Length of an optimal TSP tour. This is only relevant for benchmarking.
Keep in mind, that in case of a given optimal tour length most internal
stopping criteria of EAX are deacitvated. The algorithm stops if an optimal
tour is found or the cutoff time is reached.}

\item{seed}{[\code{integer(1)}]\cr
Seed for the random numbers generator.
Defaults to a random integer between 1 and \eqn{2^15}.}

\item{with.restarts}{[\code{logical(1)}]\cr
Should EAX restart if a plateau is reached?
Default is \code{FALSE}.}

\item{snapshot.step}{[\code{integer(1)}]\cr
Possibility to log the entire population each \code{snapshot.step}
times.
Default is \code{0}, i.e., do not log at all.}

\item{full.matrix}{[\code{logical(1)}]\cr
Only relevant if \code{instance} is a \code{Network}.
If \code{TRUE}, the network is exported to TSPlib format
with explicit edge weight definition.
Default is \code{FALSE}.}

\item{verbose}{[\code{logical(1)}]\cr
Should the output of the solver be printed?
Default is \code{FALSE}.}

\item{return.trajectory.file}{[\code{logical(1)}]\cr
If set to \code{FALSE} (the default), the logged optimization trace / trajectory
is returned as a data frame. However, long solver runs may produce a
trajectory of substantial size. If this is expected the user may decide
to return just the path to the csv file the trajectory is stored to instead
of importing this file.}

\item{init.pop}{[\code{list}]\cr
List of lists. Each sublist needs to contains three components:
\describe{
  \item{n [\code{integer(1)}]}{Number of nodes of the TSP problem.}
  \item{tour [\code{integer(n)}]}{The actual tour.}
  \item{tour.length [\code{integer(1)}]}{Length of the tour.}
}
Default is \code{NULL}, i.e., the initial population is generated
randomly and 2-Opt is applied to each solution before the evolutionary
loop starts.}

\item{...}{[any]\cr
Not used at the moment.}

\item{with.gpx}{[\code{logical(1)}]\cr
Activate GPX2 crossover?
Default is \code{FALSE}.}
}
\value{
[\code{\link{TSPSolverResult}}]
}
\description{
Inexact TSP solvers based on a genetic approach.
}
\note{
This solver requires integer inter-city distances.
}
\references{
Nagata, Y. and Kobayashi, S. (2013). A powerful genetic algorithm using
edge assembly crossover for the travelling salesman problem. INFORMS Journal
on Computing, 25(2):346-363.

Nagata, Y. and Kobayashi, S. (1997). Edge assembly crossover: A high-power
genetic algorithm for the travelling salesman problem. In Baeck, T., editor,
Proceedings of the Seventh International Conference on Genetic Algorithms
(ICGA97), pages 450-457, San Francisco, CA. Morgan Kaufmann.
}
